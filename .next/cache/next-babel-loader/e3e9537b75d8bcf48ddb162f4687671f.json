{"ast":null,"code":"import { db } from '../lib/db';\nimport { distance } from '../lib/geo';\nimport admin from 'firebase-admin';\nimport { getCurrentDate } from '../lib/datetime';\nexport const checkExists = async user => {\n  const currentDate = getCurrentDate(); //this operation\"db\" is a promise\n\n  const todaysCheckin = await db.collection('markers').doc(currentDate).collection('checks').doc(user).get();\n  const todaysData = todaysCheckin.data();\n  return todaysData;\n}; //export default checkExists\n\nexport const findChecksNearbyCheckin = async checkin => {\n  const currentDate = getCurrentDate();\n  const checkins = await db.collection('markers').doc(currentDate).collection('checks').near({\n    center: checkin.coordinates,\n    radius: 1000\n  }).get();\n  const checkinsList = [];\n  checkins.docs.forEach(doc => {\n    checkinsList.push({\n      //...doc.data(),\n      id: doc.id,\n      status: doc.data().status,\n      coords: {\n        lat: doc.data().coordinates.latitude,\n        long: doc.data().coordinates.longitude\n      },\n      distance: distance(checkin.coordinates.latitude, checkin.coordinates.longitude, doc.data().coordinates.latitude, doc.data().coordinates.longitude).toFixed(2)\n    });\n  });\n  return checkinsList;\n};\nexport const setStatus = async (user, dados) => {\n  const currentDate = getCurrentDate();\n  await db.collection('markers').doc(currentDate).collection('checks').doc(user).set({\n    status: dados.status,\n    user: user,\n    coordinates: new admin.firestore.GeoPoint(dados.coords.lat, dados.coords.long)\n  });\n};","map":{"version":3,"sources":["C:/mydailystatus/model/markers.js"],"names":["db","distance","admin","getCurrentDate","checkExists","user","currentDate","todaysCheckin","collection","doc","get","todaysData","data","findChecksNearbyCheckin","checkin","checkins","near","center","coordinates","radius","checkinsList","docs","forEach","push","id","status","coords","lat","latitude","long","longitude","toFixed","setStatus","dados","set","firestore","GeoPoint"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAMC,IAAN,IAAe;AAC9B,QAAMC,WAAW,GAAGH,cAAc,EAAlC,CAD8B,CAE9B;;AACA,QAAMI,aAAa,GAAG,MAAMP,EAAE,CACDQ,UADD,CACY,SADZ,EAECC,GAFD,CAEKH,WAFL,EAGCE,UAHD,CAGY,QAHZ,EAICC,GAJD,CAIKJ,IAJL,EAKCK,GALD,EAA5B;AAMA,QAAMC,UAAU,GAAGJ,aAAa,CAACK,IAAd,EAAnB;AACA,SAAOD,UAAP;AACX,CAXM,C,CAYP;;AACA,OAAO,MAAME,uBAAuB,GAAG,MAAMC,OAAN,IAAiB;AACpD,QAAMR,WAAW,GAAGH,cAAc,EAAlC;AACA,QAAMY,QAAQ,GAAG,MAAMf,EAAE,CACRQ,UADM,CACK,SADL,EAENC,GAFM,CAEFH,WAFE,EAGNE,UAHM,CAGK,QAHL,EAINQ,IAJM,CAID;AACFC,IAAAA,MAAM,EAAEH,OAAO,CAACI,WADd;AAEFC,IAAAA,MAAM,EAAE;AAFN,GAJC,EAQNT,GARM,EAAvB;AASA,QAAOU,YAAY,GAAG,EAAtB;AAEAL,EAAAA,QAAQ,CAACM,IAAT,CAAcC,OAAd,CAAsBb,GAAG,IAAI;AACzBW,IAAAA,YAAY,CAACG,IAAb,CAAkB;AACN;AACRC,MAAAA,EAAE,EAAEf,GAAG,CAACe,EAFM;AAGdC,MAAAA,MAAM,EAAEhB,GAAG,CAACG,IAAJ,GAAWa,MAHL;AAIdC,MAAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAElB,GAAG,CAACG,IAAJ,GAAWM,WAAX,CAAuBU,QADxB;AAEJC,QAAAA,IAAI,EAAEpB,GAAG,CAACG,IAAJ,GAAWM,WAAX,CAAuBY;AAFzB,OAJM;AAQd7B,MAAAA,QAAQ,EAAEA,QAAQ,CACda,OAAO,CAACI,WAAR,CAAoBU,QADN,EAEdd,OAAO,CAACI,WAAR,CAAoBY,SAFN,EAGdrB,GAAG,CAACG,IAAJ,GAAWM,WAAX,CAAuBU,QAHT,EAIdnB,GAAG,CAACG,IAAJ,GAAWM,WAAX,CAAuBY,SAJT,CAAR,CAKJC,OALI,CAKI,CALJ;AARI,KAAlB;AAeH,GAhBD;AAiBA,SAAOX,YAAP;AACH,CA/BM;AAgCP,OAAO,MAAMY,SAAS,GAAG,OAAM3B,IAAN,EAAY4B,KAAZ,KAAsB;AAC3C,QAAM3B,WAAW,GAAGH,cAAc,EAAlC;AACA,QAAMH,EAAE,CACAQ,UADF,CACa,SADb,EAEEC,GAFF,CAEMH,WAFN,EAGEE,UAHF,CAGa,QAHb,EAIEC,GAJF,CAIMJ,IAJN,EAKE6B,GALF,CAKM;AACDT,IAAAA,MAAM,EAAEQ,KAAK,CAACR,MADb;AAEDpB,IAAAA,IAAI,EAAEA,IAFL;AAGDa,IAAAA,WAAW,EAAE,IAAIhB,KAAK,CAACiC,SAAN,CAAgBC,QAApB,CACTH,KAAK,CAACP,MAAN,CAAaC,GADJ,EAETM,KAAK,CAACP,MAAN,CAAaG,IAFJ;AAHZ,GALN,CAAN;AAaH,CAfM","sourcesContent":["import {db} from '../lib/db'\r\nimport { distance } from '../lib/geo'\r\nimport admin from 'firebase-admin'\r\nimport {getCurrentDate} from '../lib/datetime'\r\n\r\nexport const checkExists = async(user) => {    \r\n            const currentDate = getCurrentDate()\r\n            //this operation\"db\" is a promise\r\n            const todaysCheckin = await db\r\n                                        .collection('markers')\r\n                                        .doc(currentDate)\r\n                                        .collection('checks')\r\n                                        .doc(user)\r\n                                        .get()\r\n            const todaysData = todaysCheckin.data()\r\n            return todaysData \r\n}\r\n//export default checkExists\r\nexport const findChecksNearbyCheckin = async checkin => {\r\n    const currentDate = getCurrentDate()\r\n    const checkins = await db\r\n                    .collection('markers')\r\n                    .doc(currentDate)\r\n                    .collection('checks')\r\n                    .near({\r\n                        center: checkin.coordinates,\r\n                        radius: 1000\r\n                    })\r\n                    .get()\r\n    const  checkinsList = [] \r\n            \r\n    checkins.docs.forEach(doc => {\r\n        checkinsList.push({\r\n                    //...doc.data(),\r\n            id: doc.id,\r\n            status: doc.data().status,\r\n            coords: {\r\n                lat: doc.data().coordinates.latitude,\r\n                long: doc.data().coordinates.longitude\r\n            },\r\n            distance: distance(\r\n                checkin.coordinates.latitude, \r\n                checkin.coordinates.longitude, \r\n                doc.data().coordinates.latitude, \r\n                doc.data().coordinates.longitude\r\n                ).toFixed(2)\r\n        })\r\n    })\r\n    return checkinsList\r\n}\r\nexport const setStatus = async(user, dados) => {\r\n    const currentDate = getCurrentDate()\r\n    await db\r\n           .collection('markers')\r\n           .doc(currentDate)\r\n           .collection('checks')\r\n           .doc(user)\r\n           .set({\r\n               status: dados.status,\r\n               user: user,\r\n               coordinates: new admin.firestore.GeoPoint(\r\n                   dados.coords.lat,\r\n                   dados.coords.long\r\n               )\r\n           })\r\n}"]},"metadata":{},"sourceType":"module"}